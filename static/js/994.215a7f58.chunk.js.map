{"version":3,"file":"static/js/994.215a7f58.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelServices.js"],"sourcesContent":["import img from \"./004 error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\"}} src={img} alt=\"Error message\" />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelServices\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n\tconst { id } = useParams();\r\n\tconst [data, setData] = useState(null);\r\n\r\n\tconst { loading, error, getComics, getCharacter, clearError } = useMarvelService();\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateData()\r\n\t}, [id])\r\n\r\n\tconst updateData = () => {\r\n\t\tclearError();\r\n\r\n\t\tswitch (dataType) {\r\n\t\t\tcase 'comic':\r\n\t\t\t\tgetComics(id).then(onDataLoaded);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'character':\r\n\t\t\t\tgetCharacter(id).then(onDataLoaded);\r\n\t\t}\r\n\t}\r\n\r\n\tconst onDataLoaded = (data) => {\r\n\t\tsetData(data);\r\n\t}\r\n\r\n\tconst content = !(loading || error || !data) ? <Component data={data} /> : null;\r\n\tconst errorMessage = error ? <ErrorMessage /> : null;\r\n\tconst spinner = loading ? <Spinner /> : null;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{content}\r\n\t\t\t{errorMessage}\r\n\t\t\t{spinner}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default SinglePage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\tconst [process, setProcess] = useState(\"waiting\");\r\n\r\n\tconst request = useCallback(async (url, method = \"GET\", body = null, headers = {\r\n\t\t\"Content-Type\": \"application/json\"}) => {\r\n\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetProcess(\"loading\")\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tthrow new Error(`Could not fetch ${url}, status ${response.status}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\treturn data;\r\n\t\t\t} catch(e) {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tsetError(e.message);\r\n\t\t\t\tsetProcess(\"error\");\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => {\r\n\t\tsetError(null)\r\n\t\tsetProcess(\"loading\")\r\n\t}, []);\r\n\r\n\treturn {loading, request, error, clearError, process, setProcess}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst { loading, request, error, clearError, process, setProcess } = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apikey = 'apikey=0b16f2ffd7429e208117962440421f77';\r\n\tconst _baseOffset = 210;\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`);\r\n\t\treturn res.data.results.map(_transformCharacter)\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apikey}`);\r\n\t\treturn res.data.results.map(_transformComics)\r\n\t}\r\n\r\n\tconst getComics = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apikey}`);\r\n\t\treturn _transformComics(res.data.results[0])\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apikey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apikey}`);\r\n\t\treturn res.data.results.map(_transformCharacter)\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description,\r\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tid: char.id,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\ttitle: comics.title,\r\n\t\t\tprice: comics.prices[0].price,\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tid: comics.id,\r\n\t\t\turl: comics.urls[0].url,\r\n\t\t\tdescription: comics.description,\r\n\t\t\tpageCount: comics.pageCount,\r\n\t\t\tlanguage: comics.textObjects.language || \"en-US\"\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tclearError,\r\n\t\tgetAllComics,\r\n\t\tgetComics,\r\n\t\tgetCharacterByName,\r\n\t}\r\n\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","_ref","Component","dataType","id","useParams","data","setData","useState","loading","error","getComics","getCharacter","clearError","useMarvelService","useEffect","updateData","then","onDataLoaded","content","errorMessage","spinner","Spinner","_jsxs","_Fragment","children","request","process","setProcess","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","message","_apiBase","_apikey","_transformCharacter","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","title","price","prices","pageCount","language","textObjects","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName"],"sourceRoot":""}