{"version":3,"file":"static/js/436.f775c31e.chunk.js","mappings":"kMAEA,MAMA,EANqBA,KAEnBC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAACC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAAWC,IAAKC,EAAKC,IAAI,iB,4JCKzH,MA+CMC,EAAOC,IAAe,IAAd,KAAEC,GAAMD,EACrB,MAAM,KAACE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,GAAQL,EAGvD,OACCM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EACjCpB,EAAAA,EAAAA,KAAA,OAAKO,IAAKQ,EAAWN,IAAI,mBAAmBU,UAAU,qBACtDD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAChCpB,EAAAA,EAAAA,KAAA,KAAGmB,UAAU,mBAAkBC,SAAEP,KACjCb,EAAAA,EAAAA,KAAA,KAAGmB,UAAU,oBAAmBC,SAC7BN,EAA8BA,EAAYO,MAAM,EAAG,KAAO,MAR1C,oDAUnBH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAChCpB,EAAAA,EAAAA,KAAA,KAAGsB,KAAMN,EAAUG,UAAU,sBAAqBC,UACjDpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,gBAExBpB,EAAAA,EAAAA,KAAA,KAAGsB,KAAML,EAAME,UAAU,2BAA0BC,UAClDpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,mBAIrB,EAIR,EAxEmBG,KAElB,MAAOX,EAAMY,IAAWC,EAAAA,EAAAA,UAAS,OAE3B,QAACC,EAAO,MAAEC,EAAK,aAAEC,EAAY,WAAEC,IAAcC,EAAAA,EAAAA,MAEnDC,EAAAA,EAAAA,YAAU,KACTC,GAAY,GACV,IAEH,MAAMC,EAAgBrB,IACrBY,EAAQZ,EAAK,EAGRoB,EAAaA,KAClBH,IACA,MAAMK,EAAKC,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAC5DT,EAAaM,GACXI,KAAKL,EAAa,EAGdM,EAAYb,GAAWC,IAAUf,EAA+B,MAAvBZ,EAAAA,EAAAA,KAACU,EAAI,CAACE,KAAMA,IACrD4B,EAAeb,GAAQ3B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAM,KAC1C0C,EAAUf,GAAU1B,EAAAA,EAAAA,KAAC0C,EAAAA,EAAO,IAAM,KAExC,OACCxB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACzBmB,EACAE,EACAD,GACDtB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAClCF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,oBAAmBC,SAAA,CAAC,+BACLpB,EAAAA,EAAAA,KAAA,SAAM,6CAGlCA,EAAAA,EAAAA,KAAA,KAAGmB,UAAU,oBAAmBC,SAAC,2BAGjCpB,EAAAA,EAAAA,KAAA,UAAQ2C,QAASX,EAAYb,UAAU,sBAAqBC,UAC3DpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,cAExBpB,EAAAA,EAAAA,KAAA,OAAKO,IAAKqC,EAASnC,IAAI,UAAUU,UAAU,gCAEvC,E,qBCjDT,MAeA,EAfuB0B,CAACC,EAASC,EAAWC,KAC3C,OAAQF,GACP,IAAK,UACJ,OAAO9C,EAAAA,EAAAA,KAAC0C,EAAAA,EAAO,IAChB,IAAK,UACJ,OAAOM,GAAiBhD,EAAAA,EAAAA,KAAC+C,EAAS,KAAK/C,EAAAA,EAAAA,KAAC0C,EAAAA,EAAO,IAChD,IAAK,YACJ,OAAO1C,EAAAA,EAAAA,KAAC+C,EAAS,IAClB,IAAK,QACJ,OAAO/C,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IACrB,QACC,MAAM,IAAIkD,MAAM,4BAClB,ECoFD,EA1FkBC,IAEjB,MAAOC,EAAUC,IAAe3B,EAAAA,EAAAA,UAAS,KAClCuB,EAAgBK,IAAqB5B,EAAAA,EAAAA,WAAS,IAC9C6B,EAAQC,IAAa9B,EAAAA,EAAAA,UAAS,MAC9B+B,EAAWC,IAAgBhC,EAAAA,EAAAA,WAAS,IAErC,iBAAEiC,EAAgB,QAAEZ,EAAO,WAAEa,IAAe7B,EAAAA,EAAAA,MAElDC,EAAAA,EAAAA,YAAU,KACT6B,EAAUN,GAAQ,EAAK,GACrB,IAEH,MAAMM,EAAYA,CAACN,EAAQO,KAChBR,GAAVQ,GACAH,EAAiBJ,GACfhB,KAAKwB,GACLxB,MAAK,IAAMqB,EAAW,cAAa,EAGhCG,EAAoBC,IACzB,IAAIC,GAAQ,EACRD,EAAYE,OAAS,IACxBD,GAAQ,GAGTZ,GAAYD,GAAY,IAAIA,KAAaY,KACzCV,GAAkB,GAClBE,GAAUD,GAAUA,EAAS,IAC7BG,EAAaO,EAAM,EAGdE,GAAWC,EAAAA,EAAAA,QAAO,IAQxB,SAASC,EAAYC,GACpB,MAAMC,EAAQD,EAAIE,KAAI,CAACC,EAAMC,KAC5B,IAAIC,EAAW,CAAE,UAAa,SAK9B,MAJuB,wEAAnBF,EAAKzD,YACR2D,EAAW,CAAE,UAAa,WAI1B1E,EAAAA,EAAAA,KAAC2E,EAAAA,EAAa,CAAeC,QAAS,IAAKC,WAAW,aAAYzD,UACjEF,EAAAA,EAAAA,MAAA,MACCC,UAAU,aACV2D,SAAU,EACVC,IAAKC,GAAQd,EAASe,QAAQR,GAAKO,EACnCrC,QAASA,KAnBOT,MAoBfgB,EAAMgC,eAAeV,EAAKtC,IApBXA,EAqBHuC,EApBjBP,EAASe,QAAQE,SAAQX,GAAQA,EAAKY,UAAUC,OAAO,yBACvDnB,EAASe,QAAQ/C,GAAIkD,UAAUE,IAAI,uBACnCpB,EAASe,QAAQ/C,GAAIqD,OAkBF,EACbnE,SAAA,EACFpB,EAAAA,EAAAA,KAAA,OAAKO,IAAKiE,EAAKzD,UAAWN,IAAK+D,EAAK3D,KAAMZ,MAAOyE,KACjD1E,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,aAAYC,SAAEoD,EAAK3D,WAVhB2D,EAAKtC,GAYT,IAGlB,OACClC,EAAAA,EAAAA,KAAA,MAAImB,UAAU,aAAYC,UACzBpB,EAAAA,EAAAA,KAACwF,EAAAA,EAAe,CAACC,UAAW,KAAKrE,SAC/BkD,KAIL,CAEA,OACCpD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACzByB,EAAeC,GAAS,IAAMsB,EAAYjB,IAAWH,IACtDhD,EAAAA,EAAAA,KAAA,UACCmB,UAAU,mCACVuE,SAAU1C,EACV/C,MAAO,CAAE,QAAWuD,EAAY,OAAS,SACzCb,QAASA,IAAMiB,EAAUN,GAAQlC,UACjCpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,kBAEnB,E,YCzFR,MAiBA,EAjBiBuE,KAETzE,EAAAA,EAAAA,MAAA0E,EAAAA,SAAA,CAAAxE,SAAA,EACIpB,EAAAA,EAAAA,KAAA,KAAGmB,UAAU,eAAcC,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,4BACfnB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,6BAEnBnB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,2BACfnB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,2BACfnB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,gCCM/B,EAfyB0E,CAAC/C,EAASC,EAAW+C,KAC7C,OAAQhD,GACP,IAAK,UACJ,OAAO9C,EAAAA,EAAAA,KAAC2F,EAAQ,IACjB,IAAK,UACJ,OAAO3F,EAAAA,EAAAA,KAAC0C,EAAAA,EAAO,IAChB,IAAK,YACJ,OAAO1C,EAAAA,EAAAA,KAAC+C,EAAS,CAAC+C,KAAMA,IACzB,IAAK,QACJ,OAAO9F,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IACrB,QACC,MAAM,IAAIkD,MAAM,4BAClB,EC4BKvC,EAAOC,IAAe,IAAd,KAAEmF,GAAMnF,EACrB,MAAM,KAAEE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,EAAI,OAAE8E,GAAWD,EAEjE,IAAIE,EAAe,KAiBnB,OAdCA,EADGD,EAAO9B,OAAS,EACJ8B,EAAOxB,KAAI,CAACC,EAAMC,KAChC,IAAIwB,EAAUzB,EAAK0B,YAAYC,MAAM,IAAI9E,MAAM,IAAI+E,KAAK,IACxD,OACCpG,EAAAA,EAAAA,KAACqG,EAAAA,GAAI,CAASlF,UAAU,oBAAoBmF,GAAE,WAAAC,OAAaN,GAAU7E,UACpEpB,EAAAA,EAAAA,KAAA,MAAAoB,SACEoD,EAAK3D,QAFG4D,EAIJ,IAENpD,MAAM,EAAG,IAEG,4CAIfH,EAAAA,EAAAA,MAAA0E,EAAAA,SAAA,CAAAxE,SAAA,EACCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC5BpB,EAAAA,EAAAA,KAAA,OAAKO,IAAKQ,EAAWN,IAAKI,KAC1BK,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACCpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,kBAAiBC,SAAEP,KAClCK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EAC1BpB,EAAAA,EAAAA,KAAA,KAAGsB,KAAMN,EAAUG,UAAU,sBAAqBC,UACjDpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,gBAExBpB,EAAAA,EAAAA,KAAA,KAAGsB,KAAML,EAAME,UAAU,2BAA0BC,UAClDpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,qBAK3BpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,cAAaC,SAC1BN,KAEFd,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,eAAcC,SAAC,aAC9BpB,EAAAA,EAAAA,KAAA,MAAImB,UAAU,oBAAmBC,SAC/B4E,MAEA,EAQL,EAtFkB9C,IACjB,MAAOtC,EAAMY,IAAWC,EAAAA,EAAAA,UAAS,OAE3B,aAAEG,EAAY,WAAEC,EAAU,QAAEiB,EAAO,WAAEa,IAAe7B,EAAAA,EAAAA,MAE1DC,EAAAA,EAAAA,YAAU,KACTC,GAAY,GACV,KAEHD,EAAAA,EAAAA,YAAU,KACTC,GAAY,GACV,CAACkB,EAAMsD,SAEV,MAAMvE,EAAgBrB,IACrBY,EAAQZ,EAAK,EAGRoB,EAAaA,KAClB,MAAM,OAAEwE,GAAWtD,EACnB,IAAKsD,EACJ,OAAO,EAER3E,IACAD,EAAa4E,GACXlE,KAAKL,GACLK,MAAK,IAAMqB,EAAW,cAAa,EAGtC,OACC3D,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,aAAYC,SACzByE,EAAiB/C,EAASpC,EAAME,IAC5B,ECpCR,MAAM6F,UAAsB1D,EAAAA,UAAU2D,WAAAA,GAAA,SAAAC,WAAA,KACrCC,MAAQ,CACPjF,OAAO,EACP,CAED,+BAAOkF,CAAyBlF,GAC/B,MAAO,CAACA,OAAO,EAChB,CAEAmF,iBAAAA,CAAkBnF,EAAOoF,GACxBC,QAAQC,IAAItF,EAAOoF,GACnBG,KAAKC,SAAS,CACbxF,OAAO,GAET,CAEAyF,MAAAA,GACC,OAAGF,KAAKN,MAAMjF,OACN3B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAGdmH,KAAKhE,MAAM9B,QACnB,EAGD,U,sBCnBA,MA+DA,EA/DuBiG,KAEtB,MAAOzG,EAAMY,IAAWC,EAAAA,EAAAA,UAAS,OAE3B,mBAAE6F,EAAkB,WAAEzF,EAAU,MAAEF,EAAK,QAAED,IAAYI,EAAAA,EAAAA,KAErDG,EAAgBrB,IACrBY,EAAQZ,EAAK,EAQR4B,EAAeb,GAAQ3B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAM,KAC1CwH,EAAW3G,EAAcA,EAAKqD,OAAS,GAC5C/C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACpCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,CAAC,mBAAiBR,EAAK,GAAGC,KAAK,aACpEb,EAAAA,EAAAA,KAACqG,EAAAA,GAAI,CAACC,GAAE,eAAAC,OAAiB3F,EAAK,GAAGsB,IAAMf,UAAU,2BAA0BC,UAC1EpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,kBAGzBpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,qBAAoBC,SAAC,+DAPb,KAWxB,OACCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EACjCpB,EAAAA,EAAAA,KAACwH,EAAAA,GAAM,CACNC,cAAe,CACdC,SAAU,IAEXC,iBAAkBC,EAAAA,GAAW,CAC5BF,SAAUE,EAAAA,KAAaC,SAAS,6BAEjCC,SAAUC,IAAU/F,OA1BHnB,EA0BckH,EAAOL,SAzBxC7F,SACAyF,EAAmBzG,GAAMyB,KAAKL,GAFXpB,KA0B+B,EAAAO,UAEhDF,EAAAA,EAAAA,MAAC8G,EAAAA,GAAI,CAAA5G,SAAA,EACJpB,EAAAA,EAAAA,KAAA,SAAOmB,UAAU,qBAAqB8G,QAAQ,WAAU7G,SAAC,kCACzDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACpCpB,EAAAA,EAAAA,KAACkI,EAAAA,GAAK,CACLhG,GAAG,WACHrB,KAAK,WACLsH,KAAK,OACLC,YAAY,gBACbpI,EAAAA,EAAAA,KAAA,UACCmI,KAAK,SACLhH,UAAU,sBACVuE,SAAUhE,EAAQN,UAElBpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,eAGzBpB,EAAAA,EAAAA,KAACqI,EAAAA,GAAkB,CAAClH,UAAU,qBAAqBN,KAAK,WAAW4E,UAAU,aAG9EjD,EACA+E,IACI,E,qDC7BR,EA9BiBe,KAChB,MAAOC,EAAcC,IAAmB/G,EAAAA,EAAAA,UAAS,MAMjD,OACCP,EAAAA,EAAAA,MAAA0E,EAAAA,SAAA,CAAAxE,SAAA,EACCpB,EAAAA,EAAAA,KAACyG,EAAa,CAAArF,UACbpB,EAAAA,EAAAA,KAACuB,EAAU,OAEZL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC7BpB,EAAAA,EAAAA,KAACyG,EAAa,CAAArF,UACbpB,EAAAA,EAAAA,KAACyI,EAAQ,CAACvD,eAXUhD,IACvBsG,EAAgBtG,EAAG,OAYjBhB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACCpB,EAAAA,EAAAA,KAACyG,EAAa,CAAArF,UACbpB,EAAAA,EAAAA,KAAC0I,EAAQ,CAAClC,OAAQ+B,OAEnBvI,EAAAA,EAAAA,KAACyG,EAAa,CAAArF,UACbpB,EAAAA,EAAAA,KAACqH,EAAc,aAIlBrH,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,gBAAgBZ,IAAKoI,EAAYlI,IAAI,aAClD,C,6CClCE,MCwEP,EAxEyBqB,KACxB,MAAM,QAAEJ,EAAO,QAAEkH,EAAO,MAAEjH,EAAK,WAAEE,EAAU,QAAEiB,EAAO,WAAEa,GDDhCkF,MACtB,MAAOnH,EAASoH,IAAcrH,EAAAA,EAAAA,WAAS,IAChCE,EAAOoH,IAAYtH,EAAAA,EAAAA,UAAS,OAC5BqB,EAASa,IAAclC,EAAAA,EAAAA,UAAS,WA+BvC,MAAO,CAACC,UAASkH,SA7BDI,EAAAA,EAAAA,cAAYC,eAAOC,GACO,IADFC,EAAMxC,UAAA1C,OAAA,QAAAmF,IAAAzC,UAAA,GAAAA,UAAA,GAAG,MAAO0C,EAAI1C,UAAA1C,OAAA,QAAAmF,IAAAzC,UAAA,GAAAA,UAAA,GAAG,KAAM2C,EAAO3C,UAAA1C,OAAA,QAAAmF,IAAAzC,UAAA,GAAAA,UAAA,GAAG,CAC9E,eAAgB,oBAEfmC,GAAW,GACXnF,EAAW,WACX,IACC,MAAM4F,QAAiBC,MAAMN,EAAK,CAACC,SAAQE,OAAMC,YAEjD,IAAKC,EAASE,GACb,MAAM,IAAIxG,MAAM,mBAADsD,OAAoB2C,EAAG,aAAA3C,OAAYgD,EAASG,SAG5D,MAAM5D,QAAayD,EAASI,OAE5B,OADAb,GAAW,GACJhD,CACR,CAAE,MAAM8D,GAIP,MAHAd,GAAW,GACXC,EAASa,EAAEC,SACXlG,EAAW,SACLiG,CACP,CAEF,GAAG,IAOuBjI,QAAOE,YALdmH,EAAAA,EAAAA,cAAY,KAC9BD,EAAS,MACTpF,EAAW,UAAU,GACnB,IAE0Cb,UAASa,aAAW,ECjCIkF,GAE/DiB,EAAW,4CACXC,EAAU,0CA4BVC,EAAuBpJ,IACrB,CACNC,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAClBC,UAAWH,EAAKG,UAAUkJ,KAAO,IAAMrJ,EAAKG,UAAUmJ,UACtDlJ,SAAUJ,EAAKuJ,KAAK,GAAGjB,IACvBjI,KAAML,EAAKuJ,KAAK,GAAGjB,IACnBhH,GAAItB,EAAKsB,GACT6D,OAAQnF,EAAKmF,OAAOzB,QAIhB8F,EAAoBrE,IAClB,CACNsE,MAAOtE,EAAOsE,MACdC,MAAOvE,EAAOwE,OAAO,GAAGD,MACxBvJ,UAAWgF,EAAOhF,UAAUkJ,KAAO,IAAMlE,EAAOhF,UAAUmJ,UAC1DhI,GAAI6D,EAAO7D,GACXgH,IAAKnD,EAAOoE,KAAK,GAAGjB,IACpBpI,YAAaiF,EAAOjF,YACpB0J,UAAWzE,EAAOyE,UAClBC,SAAU1E,EAAO2E,YAAYD,UAAY,UAI3C,MAAO,CACN/I,UACAC,QACAmB,UACAa,aACAD,iBAvDwBuF,iBAAiC,IAA1B3F,EAAMqD,UAAA1C,OAAA,QAAAmF,IAAAzC,UAAA,GAAAA,UAAA,GAFlB,IAInB,aADkBiC,EAAQ,GAADrC,OAAIuD,EAAQ,8BAAAvD,OAA6BjD,EAAM,KAAAiD,OAAIwD,KACjEjE,KAAKyB,QAAQhD,IAAIyF,EAC7B,EAqDCpI,aAzCoBqH,UACpB,MAAM0B,QAAY/B,EAAQ,GAADrC,OAAIuD,EAAQ,eAAAvD,OAAcrE,EAAE,KAAAqE,OAAIwD,IACzD,OAAOC,EAAoBW,EAAI7E,KAAKyB,QAAQ,GAAG,EAwC/C1F,aACA+I,aArDoB3B,iBAAiC,IAA1B3F,EAAMqD,UAAA1C,OAAA,QAAAmF,IAAAzC,UAAA,GAAAA,UAAA,GAPd,IASnB,aADkBiC,EAAQ,GAADrC,OAAIuD,EAAQ,0BAAAvD,OAAyBjD,EAAM,KAAAiD,OAAIwD,KAC7DjE,KAAKyB,QAAQhD,IAAI6F,EAC7B,EAmDCS,UAjDiB5B,UACjB,MAAM0B,QAAY/B,EAAQ,GAADrC,OAAIuD,EAAQ,WAAAvD,OAAUrE,EAAE,KAAAqE,OAAIwD,IACrD,OAAOK,EAAiBO,EAAI7E,KAAKyB,QAAQ,GAAG,EAgD5CD,mBAxC0B2B,gBACRL,EAAQ,GAADrC,OAAIuD,EAAQ,oBAAAvD,OAAmB1F,EAAI,KAAA0F,OAAIwD,KACrDjE,KAAKyB,QAAQhD,IAAIyF,GAuC5B,C","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/utils/setListContent.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/utils/setSingleContent.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelServices.js"],"sourcesContent":["import img from \"./004 error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\"}} src={img} alt=\"Error message\" />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","import { useEffect, useState } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelServices';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './randomChar.scss';\r\n\r\nconst RandomChar = () => {\r\n\r\n\tconst [char, setChar] = useState(null);\r\n\r\n\tconst {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateChar();\r\n\t}, [])\r\n\r\n\tconst onCharLoaded = (char) => {\r\n\t\tsetChar(char);\r\n\t}\r\n\r\n\tconst updateChar = () => {\r\n\t\tclearError();\r\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n\t\tgetCharacter(id)\r\n\t\t\t.then(onCharLoaded)\r\n\t}\r\n\r\n\t\tconst content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\t\tconst errorMessage = error ? <ErrorMessage /> : null;\r\n\t\tconst spinner = loading ? <Spinner /> : null;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"randomchar\">\r\n\t\t\t\t{content}\r\n\t\t\t\t{spinner}\r\n\t\t\t\t{errorMessage}\r\n\t\t\t\t<div className=\"randomchar__static\">\r\n\t\t\t\t\t<p className=\"randomchar__title\">\r\n\t\t\t\t\t\tRandom character for today!<br />\r\n\t\t\t\t\t\tDo you want to get to know him better?\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p className=\"randomchar__title\">\r\n\t\t\t\t\t\tOr choose another one\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<button onClick={updateChar} className=\"button button__main\">\r\n\t\t\t\t\t\t<div className=\"inner\">try it</div>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nconst View = ({ char }) => {\r\n\tconst {name, description, thumbnail, homepage, wiki} = char;\r\n\tconst noDescription = \"Description does not exist for this character!\";\r\n\r\n\treturn (\r\n\t\t<div className=\"randomchar__block\">\r\n\t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" />\r\n\t\t\t<div className=\"randomchar__info\">\r\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\r\n\t\t\t\t<p className=\"randomchar__descr\">\r\n\t\t\t\t\t{!description ? noDescription : description.slice(0, 210) + \"...\"}\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"randomchar__btns\">\r\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\r\n\t\t\t\t\t\t<div className=\"inner\">Homepage</div>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\r\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default RandomChar;","import Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nconst setListContent = (process, Component, newItemLoading  ) => {\r\n\tswitch (process) {\r\n\t\tcase \"waiting\":\r\n\t\t\treturn <Spinner />;\r\n\t\tcase \"loading\":\r\n\t\t\treturn newItemLoading ? <Component/> : <Spinner />;\r\n\t\tcase \"confirmed\":\r\n\t\t\treturn <Component/>;\r\n\t\tcase \"error\":\r\n\t\t\treturn <ErrorMessage />;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unexpected process state\");\r\n\t}\r\n}\r\n\r\nexport default setListContent;","import { useEffect, useState, useRef } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport CheckPropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelServices';\r\nimport setListContent from '../utils/setListContent';\r\n\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n\r\n\tconst [charList, setCharList] = useState([]);\r\n\tconst [newItemLoading, setNewItemLoading] = useState(false);\r\n\tconst [offset, setOffset] = useState(210);\r\n\tconst [charEnded, setCharEnded] = useState(false);\r\n\r\n\tconst { getAllCharacters, process, setProcess } = useMarvelService();\r\n\r\n\tuseEffect(() => {\r\n\t\tonRequest(offset, true);\r\n\t}, [])\r\n\r\n\tconst onRequest = (offset, initial) => {\r\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n\t\tgetAllCharacters(offset)\r\n\t\t\t.then(onCharListLoaded)\r\n\t\t\t.then(() => setProcess(\"confirmed\"))\r\n\t}\r\n\r\n\tconst onCharListLoaded = (newCharList) => {\r\n\t\tlet ended = false;\r\n\t\tif (newCharList.length < 9) {\r\n\t\t\tended = true;\r\n\t\t}\r\n\r\n\t\tsetCharList(charList => [...charList, ...newCharList]);\r\n\t\tsetNewItemLoading(false);\r\n\t\tsetOffset(offset => offset + 9);\r\n\t\tsetCharEnded(ended);\r\n\t}\r\n\r\n\tconst itemRefs = useRef([]);\r\n\r\n\tconst focusOnItem = (id) => {\r\n\t\titemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n\t\titemRefs.current[id].classList.add('char__item_selected');\r\n\t\titemRefs.current[id].focus();\r\n\t}\r\n\r\n\tfunction renderItems(arr) {\r\n\t\tconst items = arr.map((item, i) => {\r\n\t\t\tlet imgStyle = { 'objectFit': 'cover' };\r\n\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n\t\t\t\timgStyle = { 'objectFit': 'unset' };\r\n\t\t\t}\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<CSSTransition key={item.id} timeout={500} classNames=\"char__item\" >\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName=\"char__item\"\r\n\t\t\t\t\t\ttabIndex={0}\r\n\t\t\t\t\t\tref={elem => itemRefs.current[i] = elem}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tprops.onCharSelected(item.id);\r\n\t\t\t\t\t\t\tfocusOnItem(i);\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n\t\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</CSSTransition>\r\n\t\t\t)\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<ul className=\"char__grid\">\r\n\t\t\t\t<TransitionGroup component={null}>\r\n\t\t\t\t\t{items}\r\n\t\t\t\t</TransitionGroup>\r\n\t\t\t</ul>\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"char__list\">\r\n\t\t\t{setListContent(process, () => renderItems(charList), newItemLoading)}\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"button button__main button__long\"\r\n\t\t\t\tdisabled={newItemLoading}\r\n\t\t\t\tstyle={{ 'display': charEnded ? 'none' : 'block' }}\r\n\t\t\t\tonClick={() => onRequest(offset)}>\r\n\t\t\t\t<div className=\"inner\">load more</div>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nCharList.propTypes = {\r\n\tonCharSelected: CheckPropTypes.func\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../skeleton/Skeleton\";\r\n\r\nconst setSingleContent = (process, Component, data) => {\r\n\tswitch (process) {\r\n\t\tcase \"waiting\":\r\n\t\t\treturn <Skeleton />;\r\n\t\tcase \"loading\":\r\n\t\t\treturn <Spinner />;\r\n\t\tcase \"confirmed\":\r\n\t\t\treturn <Component data={data} />;\r\n\t\tcase \"error\":\r\n\t\t\treturn <ErrorMessage />;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unexpected process state\");\r\n\t}\r\n}\r\n\r\nexport default setSingleContent;","import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport CheckPropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelServices';\r\nimport setSingleContent from '../utils/setSingleContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\tconst [char, setChar] = useState(null);\r\n\r\n\tconst { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateChar()\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateChar()\r\n\t}, [props.charId])\r\n\r\n\tconst onCharLoaded = (char) => {\r\n\t\tsetChar(char);\r\n\t}\r\n\r\n\tconst updateChar = () => {\r\n\t\tconst { charId } = props;\r\n\t\tif (!charId) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tclearError();\r\n\t\tgetCharacter(charId)\r\n\t\t\t.then(onCharLoaded)\r\n\t\t\t.then(() => setProcess(\"confirmed\"))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"char__info\">\r\n\t\t\t{setSingleContent(process, View, char)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst View = ({ data }) => {\r\n\tconst { name, description, thumbnail, homepage, wiki, comics } = data;\r\n\r\n\tlet comicsResult = null;\r\n\r\n\tif (comics.length > 0) {\r\n\t\tcomicsResult = comics.map((item, i) => {\r\n\t\t\tlet comicId = item.resourceURI.split(\"\").slice(43).join(\"\");\r\n\t\t\treturn (\r\n\t\t\t\t<Link key={i} className=\"char__comics-item\" to={`/comics/${comicId}`}>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t{item.name}\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</Link>\r\n\t\t\t)\r\n\t\t}).slice(0, 10)\r\n\t} else {\r\n\t\tcomicsResult = \"There is no comics for this character :(\"\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"char__basics\">\r\n\t\t\t\t<img src={thumbnail} alt={name} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"char__info-name\">{name}</div>\r\n\t\t\t\t\t<div className=\"char__btns\">\r\n\t\t\t\t\t\t<a href={homepage} className=\"button button__main\">\r\n\t\t\t\t\t\t\t<div className=\"inner\">homepage</div>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\r\n\t\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"char__descr\">\r\n\t\t\t\t{description}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"char__comics\">Comics:</div>\r\n\t\t\t<ul className=\"char__comics-list\">\r\n\t\t\t\t{comicsResult}\r\n\t\t\t</ul>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nCharInfo.propTypes = {\r\n\tcharId: CheckPropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false\r\n\t}\r\n\r\n\tstatic getDerivedStateFromError(error) {\r\n\t\treturn {error: true}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tconsole.log(error, errorInfo);\r\n\t\tthis.setState({\r\n\t\t\terror: true,\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.error) {\r\n\t\t\treturn <ErrorMessage />\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Formik, Field, Form, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport useMarvelService from \"../../services/MarvelServices\";\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n\r\n\tconst [char, setChar] = useState(null)\r\n\r\n\tconst { getCharacterByName, clearError, error, loading } = useMarvelService();\r\n\r\n\tconst onCharLoaded = (char) => {\r\n\t\tsetChar(char);\r\n\t}\r\n\r\n\tconst updateChar = (name) => {\r\n\t\tclearError();\r\n\t\tgetCharacterByName(name).then(onCharLoaded);\r\n\t}\r\n\r\n\tconst errorMessage = error ? <ErrorMessage /> : null;\r\n\tconst results = !char ? null : char.length > 0 ?\r\n\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t<div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n\t\t\t<Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n\t\t\t\t<div className=\"inner\">To page</div>\r\n\t\t\t</Link>\r\n\t\t</div>:\r\n\t\t<div className=\"char__search-error\">\r\n\t\t\tThe character was not found. Check the name and try again!\r\n\t\t</div>;\r\n\r\n\treturn (\r\n\t\t<div className=\"char__search-form\">\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{\r\n\t\t\t\t\tcharName: \"\",\r\n\t\t\t\t}}\r\n\t\t\t\tvalidationSchema={Yup.object({\r\n\t\t\t\t\tcharName: Yup.string().required(\"This field is required!\")\r\n\t\t\t\t})}\r\n\t\t\t\tonSubmit={values => updateChar(values.charName)}\r\n\t\t\t>\r\n\t\t\t\t<Form>\r\n\t\t\t\t\t<label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n\t\t\t\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tid=\"charName\"\r\n\t\t\t\t\t\t\tname='charName'\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tplaceholder=\"Enter name\" />\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t\tclassName=\"button button__main\"\r\n\t\t\t\t\t\t\tdisabled={loading}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div className=\"inner\">find</div>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<FormikErrorMessage className=\"char__search-error\" name=\"charName\" component=\"div\" />\r\n\t\t\t\t</Form>\r\n\t\t\t</Formik>\r\n\t\t\t{errorMessage}\r\n\t\t\t{results}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\tconst [selectedChar, setSelectedChar] = useState(null);\r\n\r\n\tconst onCharSelected = (id) => {\r\n\t\tsetSelectedChar(id)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<RandomChar />\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t<div className=\"char__content\">\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharInfo charId={selectedChar} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharSearchForm />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\tconst [process, setProcess] = useState(\"waiting\");\r\n\r\n\tconst request = useCallback(async (url, method = \"GET\", body = null, headers = {\r\n\t\t\"Content-Type\": \"application/json\"}) => {\r\n\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetProcess(\"loading\")\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tthrow new Error(`Could not fetch ${url}, status ${response.status}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\treturn data;\r\n\t\t\t} catch(e) {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tsetError(e.message);\r\n\t\t\t\tsetProcess(\"error\");\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => {\r\n\t\tsetError(null)\r\n\t\tsetProcess(\"loading\")\r\n\t}, []);\r\n\r\n\treturn {loading, request, error, clearError, process, setProcess}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst { loading, request, error, clearError, process, setProcess } = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apikey = 'apikey=0b16f2ffd7429e208117962440421f77';\r\n\tconst _baseOffset = 210;\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`);\r\n\t\treturn res.data.results.map(_transformCharacter)\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apikey}`);\r\n\t\treturn res.data.results.map(_transformComics)\r\n\t}\r\n\r\n\tconst getComics = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apikey}`);\r\n\t\treturn _transformComics(res.data.results[0])\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apikey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apikey}`);\r\n\t\treturn res.data.results.map(_transformCharacter)\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description,\r\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tid: char.id,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\ttitle: comics.title,\r\n\t\t\tprice: comics.prices[0].price,\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tid: comics.id,\r\n\t\t\turl: comics.urls[0].url,\r\n\t\t\tdescription: comics.description,\r\n\t\t\tpageCount: comics.pageCount,\r\n\t\t\tlanguage: comics.textObjects.language || \"en-US\"\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tclearError,\r\n\t\tgetAllComics,\r\n\t\tgetComics,\r\n\t\tgetCharacterByName,\r\n\t}\r\n\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","_jsxs","className","children","slice","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","content","errorMessage","spinner","Spinner","onClick","mjolnir","setListContent","process","Component","newItemLoading","Error","props","charList","setCharList","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","setProcess","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","renderItems","arr","items","map","item","i","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","elem","current","onCharSelected","forEach","classList","remove","add","focus","TransitionGroup","component","disabled","Skeleton","_Fragment","setSingleContent","data","comics","comicsResult","comicId","resourceURI","split","join","Link","to","concat","charId","ErrorBoundary","constructor","arguments","state","getDerivedStateFromError","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearchForm","getCharacterByName","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","values","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","setSelectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","e","message","_apiBase","_apikey","_transformCharacter","path","extension","urls","_transformComics","title","price","prices","pageCount","language","textObjects","res","getAllComics","getComics"],"sourceRoot":""}